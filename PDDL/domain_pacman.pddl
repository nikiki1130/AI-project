(define (domain pacman)
    (:requirements :typing :conditional-effects)
    (:types posi)
    (:predicates (At ?p - posi)
                 (CapsulesAt ?p - posi)
                 (FoodAt ?p - posi)
                 (GhostAt ?p - posi)
                 (Connected ?pos1 ?pos2 - posi)
                 (Powered)
                 (isHome ?p - posi)
    )
    (:action eatCap
                :parameters(?PosCurrent ?PosCap - posi)
                :precondition(and (At ?PosCurrent)
                                  (CapsulesAt ?PosCap)
                                  (Connected ?PosCurrent ?PosCap))
                :effect (and (At ?PosCap)
                             (not (At ?PosCurrent))
                             (not (CapsulesAt ?PosCap))
                             (Powered)
                        )
    )
    (:action eatGhost
                :parameters(?PosCurrent ?PosGhost - posi)
                :precondition(and (At ?PosCurrent)
                                  (GhostAt ?PosGhost)
                                  (Connected ?PosCurrent ?PosGhost)
                                  (Powered))
                :effect (and (At ?PosGhost)
                             (not (At ?PosCurrent))
                             (not (GhostAt ?PosGhost)))
    )
    (:action move
                :parameters (?PosCurrent ?PosNext - posi)
                :precondition (and (At ?PosCurrent)
                                   (Connected ?PosCurrent ?PosNext)
                                   (not (GhostAt ?PosNext))
                                   (not (CapsulesAt ?PosNext)))
                :effect (and (At ?PosNext) 
                             (not (At ?PosCurrent))
                             (not (FoodAt ?PosNext))
                             
                        )
    )
    
    
)